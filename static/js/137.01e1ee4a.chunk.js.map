{"version":3,"file":"static/js/137.01e1ee4a.chunk.js","mappings":"8TAWIA,GAAUC,EAAAA,EAAAA,IAAW,SAAkBC,EAAOC,GAC9C,IAAIC,GAASC,EAAAA,EAAAA,IAAe,UAAWH,GACzC,GAA+BI,EAAAA,EAAAA,IAAiBJ,GAA1BK,GAAtB,EAAQC,WAAR,aACA,OAAuBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,IADwB,gBAGtBP,IAAAA,EACAK,WAAWG,EAAAA,EAAAA,IAAG,iBAAkBT,EAAMM,YACnCD,GALmB,IAMtB,MAAOH,IAGZ,IACDJ,EAAQ,YAAc,U,cClBP,SAASY,IACtB,IAAMC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7BC,GAAOF,EAAAA,EAAAA,IAAYG,EAAAA,IAEzB,OACE,SAAC,IAAD,WACE,UAAC,KAAD,CAAKC,KAAK,QAAQC,UAAU,SAA5B,UACGN,GACC,UAACJ,EAAD,CAASW,GAAI,EAAb,iBACK,4BAAOJ,EAAKK,KAAZ,QACH,kBAFF,8GAOA,SAACZ,EAAD,CAASW,GAAI,EAAb,+GAKF,SAAC,IAAD,CAAeE,GAAG,SAAlB,6BAIP,C,kJCtBGC,GAAMb,EAAAA,EAAAA,GAAO,OACjBa,EAAIC,YAAc,MAClB,IAAIxB,GAASC,EAAAA,EAAAA,IAAW,SAAiBwB,EAAOC,GAC9C,IAAQtB,EAAwCqB,EAAxCrB,KAAR,EAAgDqB,EAAlCvB,cAAAA,OAAd,SAAuCyB,GAAvC,OAAgDF,EAAhD,GACMG,EAAS1B,EAAgB,CAAE2B,QAAS,OAAQC,WAAY,SAAUvB,eAAgB,UAAa,GACrG,OAAuBwB,EAAAA,EAAAA,KACrBR,GADwB,QAGtBG,IAAAA,EACAM,QAAS5B,EACT6B,OAAK,kBACAL,GADA,IAEHM,WAAY,EACZC,SAAU,KAETR,GAGR,IACD3B,EAAOwB,YAAc,UACRvB,EAAAA,EAAAA,IAAW,SAAiBwB,EAAOC,GAC9C,IAAQtB,EAAkBqB,EAAlBrB,KAASuB,GAAjB,OAA0BF,EAA1B,GACA,OAAuBM,EAAAA,EAAAA,KAAI/B,GAAD,QAAWI,KAAAA,EAAMsB,IAAAA,EAAK,aAAc,UAAaC,GAC5E,IACMH,YAAc,Q","sources":["../node_modules/@chakra-ui/layout/src/heading.tsx","pages/Home.jsx","../node_modules/@chakra-ui/layout/src/box.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { useSelector } from 'react-redux';\n\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport { selectUser } from 'redux/auth/selectors';\nimport { Heading, Box, Container} from '@chakra-ui/react';\nimport { NavLinkStyled } from 'components/AuthNav/AuthNavStyled';\nexport default function HomePage() {\n  const isUserLoggedIn = useSelector(selectIsLoggedIn);\n  const user = useSelector(selectUser);\n\n  return (\n    <Container>\n      <Box maxW=\"32rem\" textAlign=\"center\">\n        {isUserLoggedIn ? (\n          <Heading mb={5}>\n            Hi <span>{user.name}!</span>\n            <br />\n            Welcome to the Phonebook. Check if you already have some contacts in\n            your book or simply add a new one.\n          </Heading>\n        ) : (\n          <Heading mb={5}>\n            Welcome to the phonebook! Please log in or register to see the\n            capabilities of this application.\n          </Heading>\n        )}\n        <NavLinkStyled to=\"/logIn\">GET STARTED</NavLinkStyled>\n      </Box>\n    </Container>\n  );\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n"],"names":["props","forwardRef","styles","className","rest","useStyleConfig","omitThemingProps","__css","h2","Heading","chakra","cx","HomePage","isUserLoggedIn","useSelector","selectIsLoggedIn","user","selectUser","maxW","textAlign","mb","name","to","displayName","Square","size","centerContent","display","alignItems","justifyContent","boxSize","Box","flexShrink","flexGrow","Circle","borderRadius"],"sourceRoot":""}
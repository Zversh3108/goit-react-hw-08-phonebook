{"version":3,"file":"static/js/111.554757df.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/input/src/input-element.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/input/src/input-group.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  Button,\n  InputRightElement,\n  InputGroup,\n  Input,\n  Container,\n} from '@chakra-ui/react';\nimport { login } from 'redux/auth/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const LoginForm = () => {\n  const [show, setShow] = React.useState(false);\n  const handleClick = () => setShow(!show);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: 'Test-user-1@gmail.com',\n    password: 'Test-user-1',\n  };\n  const handleLoginSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n\n    const userAuth = {\n      email: form.elements.email.value,\n      password: form.elements.password.value,\n    };\n    dispatch(login(userAuth));\n  };\n  return (\n    <Container maxW=\"550px\" mt={8}>\n      <form onSubmit={handleLoginSubmit}>\n        <InputGroup size=\"md\" mb={4}>\n          <Input\n            pr=\"4.5rem\"\n            type=\"email\"\n            name=\"email\"\n            value={initialValues.email}\n            placeholder=\"Enter email\"\n          />\n        </InputGroup>\n        <InputGroup size=\"md\" mb={4}>\n          <Input\n            pr=\"4.5rem\"\n            type={show ? 'text' : 'password'}\n            name=\"password\"\n            value={initialValues.password}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? 'Hide' : 'Show'}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n        <Button mt={4} colorScheme=\"teal\" type=\"submit\">\n          Log In\n        </Button>\n      </form>\n    </Container>\n  );\n};\n","import React from 'react';\n\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nexport default function Login() {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["LoginForm","React","show","setShow","dispatch","useDispatch","initialValues","maxW","mt","onSubmit","evt","preventDefault","form","target","userAuth","email","elements","value","password","login","size","mb","I","pr","type","name","placeholder","width","h","onClick","colorScheme","Login","createContext","errorMessage","FormControlStylesProvider","useFormControlStyles","strict","FormControlProvider","useFormControlContext","useFormControlProvider","ownProps","forwardRef","idProp","getLabelProps","context","useMultiStyleConfig","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","useState","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","ref","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","FormControl","styles","props","omitThemingProps","div","__css","cx","displayName","chakra","field","helperText","display","alignItems","justifyContent","position","top","zIndex","InputElement","rest","useInputGroupStyles","input","attr","elementStyles","_a","height","_b","fontSize","element","baseStyle","InputLeftElement","className","_className","StyledInputElement","useFormControlProps","ariaAttr","labelIds","readOnly","required","push","disabled","join","_c","useFormControl","callAllHandlers","htmlSize","Input","InputGroupStylesProvider","InputGroup","groupStyles","validChildren","getValidChildren","forEach","child","paddingStart","paddingEnd","borderEndRadius","borderStartRadius","clones","map","theming","variant","compact","Object","assign","cloneElement","isolation","group","object","clone","key","Children","filter","isValidElement"],"sourceRoot":""}